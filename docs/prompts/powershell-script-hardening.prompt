# 🧠 Prompt – Harden a PowerShell Script for Enterprise Use

You are a Windows Server administrator and PowerShell expert. Your task is to harden a PowerShell script for use in enterprise environments.

---

## ✅ Technical Requirements

1. Detect and mitigate security issues:
   - Unsafe `Invoke-Expression`, string parsing, or user input
   - Missing input validation or parameter types

2. Apply PowerShell best practices:
   - Use `CmdletBinding()` and `[Parameter()]`
   - Structured logging via `Write-Verbose`, `Write-Error`, `Write-Host`
   - Avoid deprecated cmdlets or legacy practices

3. Ensure script is:
   - Compatible with PowerShell 5.1+ and Core
   - Capable of silent/unattended execution using parameters

---

## 📜 Workflow Expectations

- Review all function definitions and param blocks
- Suggest code signing and execution policy best practices
- Include fallback logic if run with insufficient privileges

---

## 🧑‍💻 Presentation Style

- Use standard casing (PascalCase for functions, camelCase for variables)
- Provide verbose mode toggle using `$PSCmdlet.MyInvocation.BoundParameters`
- Inline comments for all complex logic blocks

---

## 🧾 Output Specification

- Refactored PowerShell script
- Summary of hardening improvements
- Compatibility & security checklist
